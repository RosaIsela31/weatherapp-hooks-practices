{"version":3,"sources":["component/Header.js","component/Error.js","component/Formulario.js","component/Clima.js","component/AppContainer.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","className","href","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","setError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","AppContainer","componente","consultar","guardarResultado","guardarError","useEffect","a","async","url","fetch","respuesta","json","cod","consultarAPI","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAiBeA,EAdA,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACf,OACE,6BACE,yBAAKC,UAAU,mCACb,uBAAGC,KAAK,KAAKD,UAAU,cAAcD,M,gBCO9BG,EAVD,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACd,OACI,uBAAGH,UAAU,sBAAsBG,ICoF1BC,EArFI,SAAC,GAAmD,IAAlDC,EAAiD,EAAjDA,SAAUC,EAAuC,EAAvCA,gBAAiBC,EAAsB,EAAtBA,iBAAsB,EAE1CC,oBAAS,GAFiC,mBAE7DC,EAF6D,KAEtDC,EAFsD,KAK5DC,EAAiBN,EAAjBM,OAAQC,EAASP,EAATO,KAGVC,EAAe,SAAAC,GAEnBR,EAAgB,eACXD,EADU,eAEZS,EAAEC,OAAOC,KAAQF,EAAEC,OAAOE,UAoB/B,OACE,0BACEC,SAjBiB,SAAAJ,GACnBA,EAAEK,iBAGmB,KAAlBR,EAAOS,QAAiC,KAAhBR,EAAKQ,QAKhCV,GAAS,GAGTH,GAAiB,IAPfG,GAAS,KAcVD,EAAQ,kBAAC,EAAD,CAAOT,UAAU,qBAAqBG,QAAQ,kCAAoC,KACzF,yBAAKH,UAAU,uBACb,2BACEqB,KAAK,OACLL,KAAK,SACLM,GAAG,SACHL,MAAON,EACPY,SAAUV,IAEZ,2BAAOW,QAAQ,UAAf,aAEF,yBAAKxB,UAAU,uBACb,4BACEgB,KAAK,OACLM,GAAG,OACHL,MAAOL,EACPW,SAAUV,GAEV,4BAAQI,MAAM,IAAd,iCACA,4BAAQA,MAAM,MAAd,kBACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,YACA,4BAAQA,MAAM,MAAd,cACA,4BAAQA,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,YAEF,2BAAOO,QAAQ,QAAf,cAGF,yBAAKxB,UAAU,uBACb,2BACEqB,KAAK,SACLJ,MAAM,eACNjB,UAAU,qEC1CLyB,EA9BD,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,UACPC,EAAcD,EAAdC,KAAMX,EAAQU,EAARV,KAEb,IAAIA,EAAM,OAAO,KAKjB,OACE,yBAAKhB,UAAU,4BACb,yBAAKA,UAAU,cACb,4CAAkBgB,EAAlB,SACA,uBAAGhB,UAAU,eACT4B,WAAWD,EAAKE,KAPX,OAO0B,IAAIC,QAAQ,GAD/C,IACoD,2CAEpD,oDACIF,WAAWD,EAAKI,SAVX,OAU8B,IAAID,QAAQ,GADnD,IACwD,2CAExD,iDACIF,WAAWD,EAAKK,SAbX,OAa8B,IAAIF,QAAQ,GADnD,IACwD,8CC4DjDG,EA3EM,WAAM,IAuCrBC,EAvCqB,EAGY1B,mBAAS,CAC5CG,OAAQ,GACRC,KAAM,KALiB,mBAGjBP,EAHiB,KAGPC,EAHO,OAQaE,oBAAS,GARtB,mBAQlB2B,EARkB,KAQP5B,EARO,OASaC,mBAAS,IATtB,mBASlBkB,EATkB,KASPU,EATO,OAUK5B,oBAAS,GAVd,mBAUlBC,EAVkB,KAUX4B,EAVW,KAYjB1B,EAAiBN,EAAjBM,OAAQC,EAASP,EAATO,KAsChB,OApCA0B,qBAAU,YACa,uBAAAC,EAAAC,OAAA,oDAChBL,EADgB,uBAGH,mCACRM,EAJW,4DAIgD9B,EAJhD,YAI0DC,EAJ1D,kBAGH,oCAHG,WAAA2B,EAAA,MAMOG,MAAMD,IANb,cAMXE,EANW,kBAAAJ,EAAA,MAOOI,EAAUC,QAPjB,OAOXlB,EAPW,OASjBU,EAAiBV,GACjBnB,GAAiB,GAGK,QAAlBmB,EAAUmB,IACZR,GAAa,GAEbA,GAAa,GAhBE,sCAoBrBS,KAEC,CAACX,IAIFD,EADCzB,EACY,kBAAC,EAAD,CAAON,QAAQ,oBAAoBH,UAAU,uBAE9C,kBAAC,EAAD,CACE0B,UAAWA,IAOzB,kBAAC,WAAD,KACE,kBAAC,EAAD,CACE3B,MAAM,uBAER,yBAAKC,UAAU,mBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CACEK,SAAUA,EACVC,gBAAiBA,EACjBC,iBAAkBA,KAGtB,yBAAKP,UAAU,cACbkC,QC5DCa,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWhB,MCIbiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a273c07a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = ({title}) => {\n  return ( \n    <nav>\n      <div className='nav-wrapper light-blue darken-2'>\n        <a href='#!' className='brand-logo'>{title}</a>\n      </div>\n    </nav>\n   );\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired \n}\n \nexport default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../index.css';\n\nconst Error = ({mensaje}) => {\n  return ( \n      <p className='red darken-4 error'>{mensaje}</p>\n   );\n}\n\nError.propTypes = {\n   mensaje: PropTypes.string.isRequired\n}\n \nexport default Error;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Error from './Error';\nimport '../index.css';\n\nconst Formulario = ({busqueda, guardarBusqueda, guardarConsultar}) => {\n\n  const [error, setError] = useState(false);\n\n  // Extraer ciudad y país\n  const { ciudad, pais } = busqueda;\n\n  // Función que coloca los elementos en el state\n  const handleChange = e => {\n    // Actualizar el state\n    guardarBusqueda({\n      ...busqueda,\n      [e.target.name] : e.target.value\n    });\n  }\n\n  // Cuando el usuario da submit al formulario\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Validar\n    if(ciudad.trim() === '' || pais.trim() === ''){\n      setError(true);\n      return;\n    }\n\n    setError(false);\n\n    // Pasarlo al componente principal\n    guardarConsultar(true);\n  }  \n \n  return ( \n    <form\n      onSubmit={handleSubmit}\n    >\n    {error ? <Error className='red darken-4 error' mensaje='Ambos campos son obligatorios'/> : null }\n      <div className='input-field col s12'>\n        <input \n          type='text'\n          name='ciudad'\n          id='ciudad'\n          value={ciudad}\n          onChange={handleChange}\n        /> \n        <label htmlFor='ciudad'>Ciudad: </label>\n      </div>\n      <div className='input-field col s12'>\n        <select\n          name='pais'\n          id='pais'\n          value={pais}\n          onChange={handleChange}\n        >\n          <option value=''>--  Seleccione un país  --</option>\n          <option value=\"US\">Estados Unidos</option>\n          <option value=\"MX\">México</option>\n          <option value=\"AR\">Argentina</option>\n          <option value=\"CO\">Colombia</option>\n          <option value=\"CR\">Costa Rica</option>\n          <option value=\"ES\">España</option>\n          <option value=\"PE\">Perú</option>\n        </select>\n        <label htmlFor='pais'>País: </label>         \n        \n      </div>\n      <div className='input-field col s12'>\n        <input \n          type='submit'\n          value='Buscar Clima'\n          className='waves-effect waves-light btn-large btn-block yellow accent-4 '\n        /> \n      </div>\n    </form>\n   );\n}\n\n\nFormulario.propTypes = {\n  busqueda: PropTypes.object.isRequired,\n  guardarBusqueda: PropTypes.func.isRequired,\n  guardarConsultar: PropTypes.func.isRequired\n\n}\n \nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Clima = ({resultado }) => {\n  const {main, name} = resultado;\n\n  if(!name) return null;\n\n  // Grados Kelvin\n  const kelvin = 273.15;\n\n  return ( \n    <div className='card-panel white col s12'>\n      <div className='black-text'>\n        <h2> El clima de {name} es: </h2>\n        <p className='temperatura'>\n          { parseFloat(main.temp - kelvin, 10).toFixed(2) } <span> &#x2103; </span>\n        </p>\n        <p>Temperatura máxima: \n          { parseFloat(main.temp_max - kelvin, 10).toFixed(2) } <span> &#x2103; </span>\n        </p>\n        <p>Temperatura minima: \n          { parseFloat(main.temp_min - kelvin, 10).toFixed(2) } <span> &#x2103; </span>\n        </p>\n      </div>\n    </div>\n   );\n}\n\nClima.propTypes = {\n  resultado: PropTypes.object.isRequired\n}\n \nexport default Clima;","import React, {Fragment, useState, useEffect} from 'react';\nimport Header from './Header';\nimport Formulario from './Formulario';\nimport Clima from './Clima';\nimport Error from './Error';\nimport '../index.css';\n\nconst AppContainer = () => {\n\n   // State del componente principal\n   const [busqueda, guardarBusqueda] = useState({\n    ciudad: '',\n    pais: ''\n  });\n\n  const [consultar, guardarConsultar] = useState(false);\n  const [resultado, guardarResultado] = useState({});\n  const [error, guardarError] = useState(false);\n\n  const { ciudad, pais } = busqueda;\n\n  useEffect(() => {\n    const consultarAPI = async () => {\n      if(consultar){\n\n        const appId = 'd937ac867e384963e46a254c235b1ce7';\n        const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n  \n        const respuesta = await fetch(url);\n        const resultado = await respuesta.json();\n  \n        guardarResultado(resultado);\n        guardarConsultar(false)\n\n        // Detecta si hubo resultados correctos en la consulta\n        if( resultado.cod === '404'){\n          guardarError(true)\n        }else{\n          guardarError(false)\n        }\n      }\n    }\n    consultarAPI();\n    // eslint-disable-next-line\n  }, [consultar]);\n\n  let componente;\n  if(error){\n    componente = <Error mensaje='No hay resultados' className='red darken-4 error' />\n  }else{\n    componente= <Clima \n                  resultado={resultado}\n                />\n  }\n\n \n\n  return ( \n    <Fragment>\n      <Header \n        title='This is the header'\n      />\n      <div className='contenedor-form'>\n        <div className='container'>\n          <div className='row'>\n            <div className='col m6 s12'>\n              <Formulario \n                busqueda={busqueda}\n                guardarBusqueda={guardarBusqueda}\n                guardarConsultar={guardarConsultar}\n              />\n            </div>\n            <div className='col m6 s12'>\n             {componente}\n            </div>      \n          </div>\n        </div>\n      </div>\n    </Fragment> \n    );\n}\n \nexport default AppContainer;","import React from 'react';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport AppContainer from './component/AppContainer'\n\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path='/' component={AppContainer} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}